// This file is generated by modules/translation/i18n/plurals/generate/main/generate.go DO NOT EDIT
// Copyright 2022 The Gitea Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package plurals

// DefaultRules returns a map of Rules generated from CLDR language data.
var DefaultRules *Rules

func init() {
	DefaultRules = &Rules{}

	addPluralRules(DefaultRules, "cardinal", []string{"bm", "bo", "dz", "hnj", "id", "ig", "ii", "in", "ja", "jbo", "jv", "jw", "kde", "kea", "km", "ko", "lkt", "lo", "ms", "my", "nqo", "osa", "root", "sah", "ses", "sg", "su", "th", "to", "tpi", "vi", "wo", "yo", "yue", "zh"}, &Rule{
		PluralForms: newPluralFormSet(Other),
		PluralFormFunc: func(ops *Operands) Form {
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"am", "as", "bn", "doi", "fa", "gu", "hi", "kn", "pcm", "zu"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 0 or n = 1
			if intEqualsAny(ops.I, 0) ||
				ops.NEqualsAny(1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ff", "hy", "kab"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 0,1
			if intEqualsAny(ops.I, 0, 1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ast", "ca", "de", "en", "et", "fi", "fy", "gl", "ia", "io", "ji", "lij", "nl", "sc", "scn", "sv", "sw", "ur", "yi"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"si"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0,1 or i = 0 and f = 1
			if ops.NEqualsAny(0, 1) ||
				intEqualsAny(ops.I, 0) && intEqualsAny(ops.F, 1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ak", "bho", "guw", "ln", "mg", "nso", "pa", "ti", "wa"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0..1
			if ops.NInRange(0, 1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"tzm"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0..1 or n = 11..99
			if ops.NInRange(0, 1) ||
				ops.NInRange(11, 99) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"af", "an", "asa", "az", "bal", "bem", "bez", "bg", "brx", "ce", "cgg", "chr", "ckb", "dv", "ee", "el", "eo", "eu", "fo", "fur", "gsw", "ha", "haw", "hu", "jgo", "jmc", "ka", "kaj", "kcg", "kk", "kkj", "kl", "ks", "ksb", "ku", "ky", "lb", "lg", "mas", "mgo", "ml", "mn", "mr", "nah", "nb", "nd", "ne", "nn", "nnh", "no", "nr", "ny", "nyn", "om", "or", "os", "pap", "ps", "rm", "rof", "rwk", "saq", "sd", "sdh", "seh", "sn", "so", "sq", "ss", "ssy", "st", "syr", "ta", "te", "teo", "tig", "tk", "tn", "tr", "ts", "ug", "uz", "ve", "vo", "vun", "wae", "xh", "xog"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"da"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1 or t != 0 and i = 0,1
			if ops.NEqualsAny(1) ||
				!intEqualsAny(ops.T, 0) && intEqualsAny(ops.I, 0, 1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"is"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// t = 0 and i % 10 = 1 and i % 100 != 11 or t != 0
			if intEqualsAny(ops.T, 0) && intEqualsAny(ops.I%10, 1) && !intEqualsAny(ops.I%100, 11) ||
				!intEqualsAny(ops.T, 0) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"mk"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 1) && !intEqualsAny(ops.I%100, 11) ||
				intEqualsAny(ops.F%10, 1) && !intEqualsAny(ops.F%100, 11) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ceb", "fil", "tl"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i = 1,2,3 or v = 0 and i % 10 != 4,6,9 or v != 0 and f % 10 != 4,6,9
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I, 1, 2, 3) ||
				intEqualsAny(ops.V, 0) && !intEqualsAny(ops.I%10, 4, 6, 9) ||
				!intEqualsAny(ops.V, 0) && !intEqualsAny(ops.F%10, 4, 6, 9) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"lv", "prg"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 0 or n % 100 = 11..19 or v = 2 and f % 100 = 11..19
			if ops.NModEqualsAny(10, 0) ||
				ops.NModInRange(100, 11, 19) ||
				intEqualsAny(ops.V, 2) && intInRange(ops.F%100, 11, 19) {
				return Zero
			}
			// n % 10 = 1 and n % 100 != 11 or v = 2 and f % 10 = 1 and f % 100 != 11 or v != 2 and f % 10 = 1
			if ops.NModEqualsAny(10, 1) && !ops.NModEqualsAny(100, 11) ||
				intEqualsAny(ops.V, 2) && intEqualsAny(ops.F%10, 1) && !intEqualsAny(ops.F%100, 11) ||
				!intEqualsAny(ops.V, 2) && intEqualsAny(ops.F%10, 1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"lag"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0
			if ops.NEqualsAny(0) {
				return Zero
			}
			// i = 0,1 and n != 0
			if intEqualsAny(ops.I, 0, 1) && !ops.NEqualsAny(0) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ksh"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0
			if ops.NEqualsAny(0) {
				return Zero
			}
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"iu", "naq", "sat", "se", "sma", "smi", "smj", "smn", "sms"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"shi"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 0 or n = 1
			if intEqualsAny(ops.I, 0) ||
				ops.NEqualsAny(1) {
				return One
			}
			// n = 2..10
			if ops.NInRange(2, 10) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"mo", "ro"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			// v != 0 or n = 0 or n % 100 = 2..19
			if !intEqualsAny(ops.V, 0) ||
				ops.NEqualsAny(0) ||
				ops.NModInRange(100, 2, 19) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"bs", "hr", "sh", "sr"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 1) && !intEqualsAny(ops.I%100, 11) ||
				intEqualsAny(ops.F%10, 1) && !intEqualsAny(ops.F%100, 11) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14
			if intEqualsAny(ops.V, 0) && intInRange(ops.I%10, 2, 4) && !intInRange(ops.I%100, 12, 14) ||
				intInRange(ops.F%10, 2, 4) && !intInRange(ops.F%100, 12, 14) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"fr"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 0,1
			if intEqualsAny(ops.I, 0, 1) {
				return One
			}
			// e = 0 and i != 0 and i % 1000000 = 0 and v = 0 or e != 0..5
			if intEqualsAny(ops.E, 0) && !intEqualsAny(ops.I, 0) && intEqualsAny(ops.I%1000000, 0) && intEqualsAny(ops.V, 0) ||
				!intInRange(ops.E, 0, 5) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"pt"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 0..1
			if intInRange(ops.I, 0, 1) {
				return One
			}
			// e = 0 and i != 0 and i % 1000000 = 0 and v = 0 or e != 0..5
			if intEqualsAny(ops.E, 0) && !intEqualsAny(ops.I, 0) && intEqualsAny(ops.I%1000000, 0) && intEqualsAny(ops.V, 0) ||
				!intInRange(ops.E, 0, 5) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"it", "pt_PT"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			// e = 0 and i != 0 and i % 1000000 = 0 and v = 0 or e != 0..5
			if intEqualsAny(ops.E, 0) && !intEqualsAny(ops.I, 0) && intEqualsAny(ops.I%1000000, 0) && intEqualsAny(ops.V, 0) ||
				!intInRange(ops.E, 0, 5) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"es"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// e = 0 and i != 0 and i % 1000000 = 0 and v = 0 or e != 0..5
			if intEqualsAny(ops.E, 0) && !intEqualsAny(ops.I, 0) && intEqualsAny(ops.I%1000000, 0) && intEqualsAny(ops.V, 0) ||
				!intInRange(ops.E, 0, 5) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"gd"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,11
			if ops.NEqualsAny(1, 11) {
				return One
			}
			// n = 2,12
			if ops.NEqualsAny(2, 12) {
				return Two
			}
			// n = 3..10,13..19
			if ops.NInRange(3, 10) || ops.NInRange(13, 19) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"sl"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 100 = 1
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%100, 1) {
				return One
			}
			// v = 0 and i % 100 = 2
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%100, 2) {
				return Two
			}
			// v = 0 and i % 100 = 3..4 or v != 0
			if intEqualsAny(ops.V, 0) && intInRange(ops.I%100, 3, 4) ||
				!intEqualsAny(ops.V, 0) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"dsb", "hsb"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 100 = 1 or f % 100 = 1
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%100, 1) ||
				intEqualsAny(ops.F%100, 1) {
				return One
			}
			// v = 0 and i % 100 = 2 or f % 100 = 2
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%100, 2) ||
				intEqualsAny(ops.F%100, 2) {
				return Two
			}
			// v = 0 and i % 100 = 3..4 or f % 100 = 3..4
			if intEqualsAny(ops.V, 0) && intInRange(ops.I%100, 3, 4) ||
				intInRange(ops.F%100, 3, 4) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"he", "iw"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			// i = 2 and v = 0
			if intEqualsAny(ops.I, 2) && intEqualsAny(ops.V, 0) {
				return Two
			}
			// v = 0 and n != 0..10 and n % 10 = 0
			if intEqualsAny(ops.V, 0) && !ops.NInRange(0, 10) && ops.NModEqualsAny(10, 0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"cs", "sk"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			// i = 2..4 and v = 0
			if intInRange(ops.I, 2, 4) && intEqualsAny(ops.V, 0) {
				return Few
			}
			// v != 0
			if !intEqualsAny(ops.V, 0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"pl"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1 and v = 0
			if intEqualsAny(ops.I, 1) && intEqualsAny(ops.V, 0) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14
			if intEqualsAny(ops.V, 0) && intInRange(ops.I%10, 2, 4) && !intInRange(ops.I%100, 12, 14) {
				return Few
			}
			// v = 0 and i != 1 and i % 10 = 0..1 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 12..14
			if intEqualsAny(ops.V, 0) && !intEqualsAny(ops.I, 1) && intInRange(ops.I%10, 0, 1) ||
				intEqualsAny(ops.V, 0) && intInRange(ops.I%10, 5, 9) ||
				intEqualsAny(ops.V, 0) && intInRange(ops.I%100, 12, 14) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"be"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 1 and n % 100 != 11
			if ops.NModEqualsAny(10, 1) && !ops.NModEqualsAny(100, 11) {
				return One
			}
			// n % 10 = 2..4 and n % 100 != 12..14
			if ops.NModInRange(10, 2, 4) && !ops.NModInRange(100, 12, 14) {
				return Few
			}
			// n % 10 = 0 or n % 10 = 5..9 or n % 100 = 11..14
			if ops.NModEqualsAny(10, 0) ||
				ops.NModInRange(10, 5, 9) ||
				ops.NModInRange(100, 11, 14) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"lt"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 1 and n % 100 != 11..19
			if ops.NModEqualsAny(10, 1) && !ops.NModInRange(100, 11, 19) {
				return One
			}
			// n % 10 = 2..9 and n % 100 != 11..19
			if ops.NModInRange(10, 2, 9) && !ops.NModInRange(100, 11, 19) {
				return Few
			}
			// f != 0
			if !intEqualsAny(ops.F, 0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"mt"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 0 or n % 100 = 2..10
			if ops.NEqualsAny(0) ||
				ops.NModInRange(100, 2, 10) {
				return Few
			}
			// n % 100 = 11..19
			if ops.NModInRange(100, 11, 19) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ru", "uk"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 10 = 1 and i % 100 != 11
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 1) && !intEqualsAny(ops.I%100, 11) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14
			if intEqualsAny(ops.V, 0) && intInRange(ops.I%10, 2, 4) && !intInRange(ops.I%100, 12, 14) {
				return Few
			}
			// v = 0 and i % 10 = 0 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 11..14
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 0) ||
				intEqualsAny(ops.V, 0) && intInRange(ops.I%10, 5, 9) ||
				intEqualsAny(ops.V, 0) && intInRange(ops.I%100, 11, 14) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"br"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 1 and n % 100 != 11,71,91
			if ops.NModEqualsAny(10, 1) && !ops.NModEqualsAny(100, 11, 71, 91) {
				return One
			}
			// n % 10 = 2 and n % 100 != 12,72,92
			if ops.NModEqualsAny(10, 2) && !ops.NModEqualsAny(100, 12, 72, 92) {
				return Two
			}
			// n % 10 = 3..4,9 and n % 100 != 10..19,70..79,90..99
			if (ops.NModInRange(10, 3, 4) || ops.NModEqualsAny(10, 9)) && !(ops.NModInRange(100, 10, 19) || ops.NModInRange(100, 70, 79) || ops.NModInRange(100, 90, 99)) {
				return Few
			}
			// n != 0 and n % 1000000 = 0
			if !ops.NEqualsAny(0) && ops.NModEqualsAny(1000000, 0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ga"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			// n = 3..6
			if ops.NInRange(3, 6) {
				return Few
			}
			// n = 7..10
			if ops.NInRange(7, 10) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"gv"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// v = 0 and i % 10 = 1
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 1) {
				return One
			}
			// v = 0 and i % 10 = 2
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%10, 2) {
				return Two
			}
			// v = 0 and i % 100 = 0,20,40,60,80
			if intEqualsAny(ops.V, 0) && intEqualsAny(ops.I%100, 0, 20, 40, 60, 80) {
				return Few
			}
			// v != 0
			if !intEqualsAny(ops.V, 0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"kw"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0
			if ops.NEqualsAny(0) {
				return Zero
			}
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n % 100 = 2,22,42,62,82 or n % 1000 = 0 and n % 100000 = 1000..20000,40000,60000,80000 or n != 0 and n % 1000000 = 100000
			if ops.NModEqualsAny(100, 2, 22, 42, 62, 82) ||
				ops.NModEqualsAny(1000, 0) && (ops.NModInRange(100000, 1000, 20000) || ops.NModEqualsAny(100000, 40000, 60000, 80000)) ||
				!ops.NEqualsAny(0) && ops.NModEqualsAny(1000000, 100000) {
				return Two
			}
			// n % 100 = 3,23,43,63,83
			if ops.NModEqualsAny(100, 3, 23, 43, 63, 83) {
				return Few
			}
			// n != 1 and n % 100 = 1,21,41,61,81
			if !ops.NEqualsAny(1) && ops.NModEqualsAny(100, 1, 21, 41, 61, 81) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"ar", "ars"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0
			if ops.NEqualsAny(0) {
				return Zero
			}
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			// n % 100 = 3..10
			if ops.NModInRange(100, 3, 10) {
				return Few
			}
			// n % 100 = 11..99
			if ops.NModInRange(100, 11, 99) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "cardinal", []string{"cy"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0
			if ops.NEqualsAny(0) {
				return Zero
			}
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			// n = 3
			if ops.NEqualsAny(3) {
				return Few
			}
			// n = 6
			if ops.NEqualsAny(6) {
				return Many
			}
			return Other
		},
	})

	addPluralRules(DefaultRules, "ordinal", []string{"af", "am", "an", "ar", "bg", "bs", "ce", "cs", "da", "de", "dsb", "el", "es", "et", "eu", "fa", "fi", "fy", "gl", "gsw", "he", "hr", "hsb", "ia", "id", "in", "is", "iw", "ja", "km", "kn", "ko", "ky", "lt", "lv", "ml", "mn", "my", "nb", "nl", "no", "pa", "pl", "prg", "ps", "pt", "root", "ru", "sd", "sh", "si", "sk", "sl", "sr", "sw", "ta", "te", "th", "tpi", "tr", "ur", "uz", "yue", "zh", "zu"}, &Rule{
		PluralForms: newPluralFormSet(Other),
		PluralFormFunc: func(ops *Operands) Form {
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"sv"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 1,2 and n % 100 != 11,12
			if ops.NModEqualsAny(10, 1, 2) && !ops.NModEqualsAny(100, 11, 12) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"bal", "fil", "fr", "ga", "hy", "lo", "mo", "ms", "ro", "tl", "vi"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"hu"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,5
			if ops.NEqualsAny(1, 5) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"ne"}, &Rule{
		PluralForms: newPluralFormSet(One, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1..4
			if ops.NInRange(1, 4) {
				return One
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"be"}, &Rule{
		PluralForms: newPluralFormSet(Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 2,3 and n % 100 != 12,13
			if ops.NModEqualsAny(10, 2, 3) && !ops.NModEqualsAny(100, 12, 13) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"uk"}, &Rule{
		PluralForms: newPluralFormSet(Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 3 and n % 100 != 13
			if ops.NModEqualsAny(10, 3) && !ops.NModEqualsAny(100, 13) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"tk"}, &Rule{
		PluralForms: newPluralFormSet(Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 6,9 or n = 10
			if ops.NModEqualsAny(10, 6, 9) ||
				ops.NEqualsAny(10) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"kk"}, &Rule{
		PluralForms: newPluralFormSet(Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 6 or n % 10 = 9 or n % 10 = 0 and n != 0
			if ops.NModEqualsAny(10, 6) ||
				ops.NModEqualsAny(10, 9) ||
				ops.NModEqualsAny(10, 0) && !ops.NEqualsAny(0) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"it", "sc", "scn"}, &Rule{
		PluralForms: newPluralFormSet(Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 11,8,80,800
			if ops.NEqualsAny(11, 8, 80, 800) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"lij"}, &Rule{
		PluralForms: newPluralFormSet(Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 11,8,80..89,800..899
			if ops.NInRange(80, 89) || ops.NInRange(800, 899) || ops.NEqualsAny(11, 8) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"ka"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i = 1
			if intEqualsAny(ops.I, 1) {
				return One
			}
			// i = 0 or i % 100 = 2..20,40,60,80
			if intEqualsAny(ops.I, 0) ||
				(intInRange(ops.I%100, 2, 20) || intEqualsAny(ops.I%100, 40, 60, 80)) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"sq"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n % 10 = 4 and n % 100 != 14
			if ops.NModEqualsAny(10, 4) && !ops.NModEqualsAny(100, 14) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"kw"}, &Rule{
		PluralForms: newPluralFormSet(One, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1..4 or n % 100 = 1..4,21..24,41..44,61..64,81..84
			if ops.NInRange(1, 4) ||
				(ops.NModInRange(100, 1, 4) || ops.NModInRange(100, 21, 24) || ops.NModInRange(100, 41, 44) || ops.NModInRange(100, 61, 64) || ops.NModInRange(100, 81, 84)) {
				return One
			}
			// n = 5 or n % 100 = 5
			if ops.NEqualsAny(5) ||
				ops.NModEqualsAny(100, 5) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"en"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n % 10 = 1 and n % 100 != 11
			if ops.NModEqualsAny(10, 1) && !ops.NModEqualsAny(100, 11) {
				return One
			}
			// n % 10 = 2 and n % 100 != 12
			if ops.NModEqualsAny(10, 2) && !ops.NModEqualsAny(100, 12) {
				return Two
			}
			// n % 10 = 3 and n % 100 != 13
			if ops.NModEqualsAny(10, 3) && !ops.NModEqualsAny(100, 13) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"mr"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2,3
			if ops.NEqualsAny(2, 3) {
				return Two
			}
			// n = 4
			if ops.NEqualsAny(4) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"gd"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,11
			if ops.NEqualsAny(1, 11) {
				return One
			}
			// n = 2,12
			if ops.NEqualsAny(2, 12) {
				return Two
			}
			// n = 3,13
			if ops.NEqualsAny(3, 13) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"ca"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,3
			if ops.NEqualsAny(1, 3) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			// n = 4
			if ops.NEqualsAny(4) {
				return Few
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"mk"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i % 10 = 1 and i % 100 != 11
			if intEqualsAny(ops.I%10, 1) && !intEqualsAny(ops.I%100, 11) {
				return One
			}
			// i % 10 = 2 and i % 100 != 12
			if intEqualsAny(ops.I%10, 2) && !intEqualsAny(ops.I%100, 12) {
				return Two
			}
			// i % 10 = 7,8 and i % 100 != 17,18
			if intEqualsAny(ops.I%10, 7, 8) && !intEqualsAny(ops.I%100, 17, 18) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"az"}, &Rule{
		PluralForms: newPluralFormSet(One, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// i % 10 = 1,2,5,7,8 or i % 100 = 20,50,70,80
			if intEqualsAny(ops.I%10, 1, 2, 5, 7, 8) ||
				intEqualsAny(ops.I%100, 20, 50, 70, 80) {
				return One
			}
			// i % 10 = 3,4 or i % 1000 = 100,200,300,400,500,600,700,800,900
			if intEqualsAny(ops.I%10, 3, 4) ||
				intEqualsAny(ops.I%1000, 100, 200, 300, 400, 500, 600, 700, 800, 900) {
				return Few
			}
			// i = 0 or i % 10 = 6 or i % 100 = 40,60,90
			if intEqualsAny(ops.I, 0) ||
				intEqualsAny(ops.I%10, 6) ||
				intEqualsAny(ops.I%100, 40, 60, 90) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"gu", "hi"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2,3
			if ops.NEqualsAny(2, 3) {
				return Two
			}
			// n = 4
			if ops.NEqualsAny(4) {
				return Few
			}
			// n = 6
			if ops.NEqualsAny(6) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"as", "bn"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,5,7,8,9,10
			if ops.NEqualsAny(1, 5, 7, 8, 9, 10) {
				return One
			}
			// n = 2,3
			if ops.NEqualsAny(2, 3) {
				return Two
			}
			// n = 4
			if ops.NEqualsAny(4) {
				return Few
			}
			// n = 6
			if ops.NEqualsAny(6) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"or"}, &Rule{
		PluralForms: newPluralFormSet(One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 1,5,7..9
			if ops.NInRange(7, 9) || ops.NEqualsAny(1, 5) {
				return One
			}
			// n = 2,3
			if ops.NEqualsAny(2, 3) {
				return Two
			}
			// n = 4
			if ops.NEqualsAny(4) {
				return Few
			}
			// n = 6
			if ops.NEqualsAny(6) {
				return Many
			}
			return Other
		},
	})
	addPluralRules(DefaultRules, "ordinal", []string{"cy"}, &Rule{
		PluralForms: newPluralFormSet(Zero, One, Two, Few, Many, Other),
		PluralFormFunc: func(ops *Operands) Form {
			// n = 0,7,8,9
			if ops.NEqualsAny(0, 7, 8, 9) {
				return Zero
			}
			// n = 1
			if ops.NEqualsAny(1) {
				return One
			}
			// n = 2
			if ops.NEqualsAny(2) {
				return Two
			}
			// n = 3,4
			if ops.NEqualsAny(3, 4) {
				return Few
			}
			// n = 5,6
			if ops.NEqualsAny(5, 6) {
				return Many
			}
			return Other
		},
	})
}
