// This file is generated by modules/translation/i18n/plurals/generate/main/generate.go DO NOT EDIT
// Copyright 2022 The Gitea Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package plurals

import "testing"

func Test0cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0~15", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"bm", "bo", "dz", "hnj", "id", "ig", "ii", "in", "ja", "jbo", "jv", "jw", "kde", "kea", "km", "ko", "lkt", "lo", "ms", "my", "nqo", "osa", "root", "sah", "ses", "sg", "su", "th", "to", "tpi", "vi", "wo", "yo", "yue", "zh"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test1cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~1.0", "0.00~0.04"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"1.1~2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"am", "as", "bn", "doi", "fa", "gu", "hi", "kn", "pcm", "zu"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test2cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~1.5"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ff", "hy", "kab"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test3cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ast", "ca", "de", "en", "et", "fi", "fy", "gl", "ia", "io", "ji", "lij", "nl", "sc", "scn", "sv", "sw", "ur", "yi"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test4cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0", "0.1", "1.0", "0.00", "0.01", "1.00", "0.000", "0.001", "1.000", "0.0000", "0.0001", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.2~0.9", "1.1~1.8", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"si"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test5cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ak", "bho", "guw", "ln", "mg", "nso", "pa", "ti", "wa"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test6cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1", "11~24"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0", "1.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "20.0", "21.0", "22.0", "23.0", "24.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~10", "100~106", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"tzm"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test7cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"af", "an", "asa", "az", "bal", "bem", "bez", "bg", "brx", "ce", "cgg", "chr", "ckb", "dv", "ee", "el", "eo", "eu", "fo", "fur", "gsw", "ha", "haw", "hu", "jgo", "jmc", "ka", "kaj", "kcg", "kk", "kkj", "kl", "ks", "ksb", "ku", "ky", "lb", "lg", "mas", "mgo", "ml", "mn", "mr", "nah", "nb", "nd", "ne", "nn", "nnh", "no", "nr", "ny", "nyn", "om", "or", "os", "pap", "ps", "rm", "rof", "rwk", "saq", "sd", "sdh", "seh", "sn", "so", "sq", "ss", "ssy", "st", "syr", "ta", "te", "teo", "tig", "tk", "tn", "tr", "ts", "ug", "uz", "ve", "vo", "vun", "wae", "xh", "xog"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test8cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1~1.6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "2.0~3.4", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"da"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test9cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1~1.6", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"is"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test10cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "0.2~1.0", "1.2~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"mk"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test11cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0~3", "5", "7", "8", "10~13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~0.3", "0.5", "0.7", "0.8", "1.0~1.3", "1.5", "1.7", "1.8", "2.0", "2.1", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.4", "0.6", "0.9", "1.4", "1.6", "1.9", "2.4", "2.6", "10.4", "100.4", "1000.4"})

	locales := []string{"ceb", "fil", "tl"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test12cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0", "10~20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1", "1.0", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~9", "22~29", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.2~0.9", "1.2~1.9", "10.2", "100.2", "1000.2"})

	locales := []string{"lv", "prg"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test13cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1~1.6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"lag"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test14cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ksh"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test15cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "3~17", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"iu", "naq", "sat", "se", "sma", "smi", "smj", "smn", "sms"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test16cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~1.0", "0.00~0.04"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~10"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "2.00", "3.00", "4.00", "5.00", "6.00", "7.00", "8.00"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"11~26", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"1.1~1.9", "2.1~2.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"shi"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test17cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"0", "2~16", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"20~35", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"mo", "ro"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test18cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"0.2~0.4", "1.2~1.4", "2.2~2.4", "3.2~3.4", "4.2~4.4", "5.2", "10.2", "100.2", "1000.2"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "0.5~1.0", "1.5~2.0", "2.5~2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"bs", "hr", "sh", "sr"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test19cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~1.5"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"1000000", "1c6", "2c6", "3c6", "4c6", "5c6", "6c6"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"1.0000001c6", "1.1c6", "2.0000001c6", "2.1c6", "3.0000001c6", "3.1c6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1c3", "2c3", "3c3", "4c3", "5c3", "6c3"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0", "1.0001c3", "1.1c3", "2.0001c3", "2.1c3", "3.0001c3", "3.1c3"})

	locales := []string{"fr"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test20cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"0", "1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.0~1.5"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"1000000", "1c6", "2c6", "3c6", "4c6", "5c6", "6c6"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"1.0000001c6", "1.1c6", "2.0000001c6", "2.1c6", "3.0000001c6", "3.1c6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"2~17", "100", "1000", "10000", "100000", "1c3", "2c3", "3c3", "4c3", "5c3", "6c3"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"2.0~3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0", "1.0001c3", "1.1c3", "2.0001c3", "2.1c3", "3.0001c3", "3.1c3"})

	locales := []string{"pt"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test21cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"1000000", "1c6", "2c6", "3c6", "4c6", "5c6", "6c6"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"1.0000001c6", "1.1c6", "2.0000001c6", "2.1c6", "3.0000001c6", "3.1c6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1c3", "2c3", "3c3", "4c3", "5c3", "6c3"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0", "1.0001c3", "1.1c3", "2.0001c3", "2.1c3", "3.0001c3", "3.1c3"})

	locales := []string{"it", "pt_PT"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test22cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"1000000", "1c6", "2c6", "3c6", "4c6", "5c6", "6c6"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"1.0000001c6", "1.1c6", "2.0000001c6", "2.1c6", "3.0000001c6", "3.1c6"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1c3", "2c3", "3c3", "4c3", "5c3", "6c3"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0", "1.0001c3", "1.1c3", "2.0001c3", "2.1c3", "3.0001c3", "3.1c3"})

	locales := []string{"es"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test23cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "11"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "11.0", "1.00", "11.00", "1.000", "11.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "12"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "12.0", "2.00", "12.00", "2.000", "12.000", "2.0000"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3~10", "13~19"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "3.00"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "20~34", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"gd"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test24cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"sl"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test25cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"0.2", "1.2", "2.2", "3.2", "4.2", "5.2", "6.2", "7.2", "10.2", "100.2", "1000.2"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"0.3", "0.4", "1.3", "1.4", "2.3", "2.4", "3.3", "3.4", "4.3", "4.4", "5.3", "5.4", "6.3", "6.4", "7.3", "7.4", "10.3", "100.3", "1000.3"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "0.5~1.0", "1.5~2.0", "2.5~2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"dsb", "hsb"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test26cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"20", "30", "40", "50", "60", "70", "80", "90", "100", "1000", "10000", "100000", "1000000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "3~17", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"he", "iw"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test27cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~4"})

	tests = appendDecimalTests(tests, "cardinal", Many, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"cs", "sk"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test28cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"pl"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test29cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"2.0", "3.0", "4.0", "22.0", "23.0", "24.0", "32.0", "33.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"0.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.1", "1000.1"})

	locales := []string{"be"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test30cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~9", "22~29", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "22.0", "102.0", "1002.0"})

	tests = appendDecimalTests(tests, "cardinal", Many, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.1", "1000.1"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "10~20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"lt"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test31cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"0", "2~10", "102~107", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"11~19", "111~117", "1011"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"20~35", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"mt"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test32cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"2~4", "22~24", "32~34", "42~44", "52~54", "62", "102", "1002"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ru", "uk"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test33cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "21", "31", "41", "51", "61", "81", "101", "1001"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "81.0", "101.0", "1001.0"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "22", "32", "42", "52", "62", "82", "102", "1002"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "22.0", "32.0", "42.0", "52.0", "62.0", "82.0", "102.0", "1002.0"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3", "4", "9", "23", "24", "29", "33", "34", "39", "43", "44", "49", "103", "1003"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "4.0", "9.0", "23.0", "24.0", "29.0", "33.0", "34.0", "103.0", "1003.0"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"1000000"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"1000000.0", "1000000.00", "1000000.000", "1000000.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "5~8", "10~20", "100", "1000", "10000", "100000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0"})

	locales := []string{"br"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test34cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3~6"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "4.0", "5.0", "6.0", "3.00", "4.00", "5.00", "6.00", "3.000", "4.000", "5.000", "6.000", "3.0000", "4.0000", "5.0000", "6.0000"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"7~10"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"7.0", "8.0", "9.0", "10.0", "7.00", "8.00", "9.00", "10.00", "7.000", "8.000", "9.000", "10.000", "7.0000", "8.0000", "9.0000", "10.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"0", "11~25", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.0~0.9", "1.1~1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ga"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test35cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1", "11", "21", "31", "41", "51", "61", "71", "101", "1001"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "12", "22", "32", "42", "52", "62", "72", "102", "1002"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"0", "20", "40", "60", "80", "100", "120", "140", "1000", "10000", "100000", "1000000"})

	tests = appendDecimalTests(tests, "cardinal", Many, []string{"0.0~1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"3~10", "13~19", "23", "103", "1003"})

	locales := []string{"gv"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test36cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2", "22", "42", "62", "82", "102", "122", "142", "1000", "10000", "100000"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "22.0", "42.0", "62.0", "82.0", "102.0", "122.0", "142.0", "1000.0", "10000.0", "100000.0"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3", "23", "43", "63", "83", "103", "123", "143", "1003"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "23.0", "43.0", "63.0", "83.0", "103.0", "123.0", "143.0", "1003.0"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"21", "41", "61", "81", "101", "121", "141", "161", "1001"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"21.0", "41.0", "61.0", "81.0", "101.0", "121.0", "141.0", "161.0", "1001.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"4~19", "100", "1004", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.1", "1000000.0"})

	locales := []string{"kw"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test37cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3~10", "103~110", "1003"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "103.0", "1003.0"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"11~26", "111", "1011"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"100~102", "200~202", "300~302", "400~402", "500~502", "600", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"ar", "ars"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test38cardinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "cardinal", Zero, []string{"0"})
	tests = appendDecimalTests(tests, "cardinal", Zero, []string{"0.0", "0.00", "0.000", "0.0000"})

	tests = appendIntegerTests(tests, "cardinal", One, []string{"1"})
	tests = appendDecimalTests(tests, "cardinal", One, []string{"1.0", "1.00", "1.000", "1.0000"})

	tests = appendIntegerTests(tests, "cardinal", Two, []string{"2"})
	tests = appendDecimalTests(tests, "cardinal", Two, []string{"2.0", "2.00", "2.000", "2.0000"})

	tests = appendIntegerTests(tests, "cardinal", Few, []string{"3"})
	tests = appendDecimalTests(tests, "cardinal", Few, []string{"3.0", "3.00", "3.000", "3.0000"})

	tests = appendIntegerTests(tests, "cardinal", Many, []string{"6"})
	tests = appendDecimalTests(tests, "cardinal", Many, []string{"6.0", "6.00", "6.000", "6.0000"})

	tests = appendIntegerTests(tests, "cardinal", Other, []string{"4", "5", "7~20", "100", "1000", "10000", "100000", "1000000"})
	tests = appendDecimalTests(tests, "cardinal", Other, []string{"0.1~0.9", "1.1~1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"})

	locales := []string{"cy"}
	for _, locale := range locales {
		runTests(t, locale, "cardinal", tests)
	}
}

func Test0ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~15", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"af", "am", "an", "ar", "bg", "bs", "ce", "cs", "da", "de", "dsb", "el", "es", "et", "eu", "fa", "fi", "fy", "gl", "gsw", "he", "hr", "hsb", "ia", "id", "in", "is", "iw", "ja", "km", "kn", "ko", "ky", "lt", "lv", "ml", "mn", "my", "nb", "nl", "no", "pa", "pl", "prg", "ps", "pt", "root", "ru", "sd", "sh", "si", "sk", "sl", "sr", "sw", "ta", "te", "th", "tpi", "tr", "ur", "uz", "yue", "zh", "zu"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test1ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "2", "21", "22", "31", "32", "41", "42", "51", "52", "61", "62", "71", "72", "81", "82", "101", "1001"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "3~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"sv"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test2ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "2~16", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"bal", "fil", "fr", "ga", "hy", "lo", "mo", "ms", "ro", "tl", "vi"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test3ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "5"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "2~4", "6~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"hu"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test4ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1~4"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"ne"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test5ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"2", "3", "22", "23", "32", "33", "42", "43", "52", "53", "62", "63", "72", "73", "82", "83", "102", "1002"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "1", "4~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"be"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test6ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"3", "23", "33", "43", "53", "63", "73", "83", "103", "1003"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~2", "4~16", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"uk"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test7ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"6", "9", "10", "16", "19", "26", "29", "36", "39", "106", "1006"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~5", "7", "8", "11~15", "17", "18", "20", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"tk"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test8ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"6", "9", "10", "16", "19", "20", "26", "29", "30", "36", "39", "40", "100", "1000", "10000", "100000", "1000000"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~5", "7", "8", "11~15", "17", "18", "21", "101", "1001"})

	locales := []string{"kk"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test9ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"8", "11", "80", "800"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~7", "9", "10", "12~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"it", "sc", "scn"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test10ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"8", "11", "80~89", "800~803"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0~7", "9", "10", "12~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"lij"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test11ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"0", "2~16", "102", "1002"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"21~36", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"ka"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test12ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"4", "24", "34", "44", "54", "64", "74", "84", "104", "1004"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "2", "3", "5~17", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"sq"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test13ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1~4", "21~24", "41~44", "61~64", "101", "1001"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"5", "105", "205", "305", "405", "505", "605", "705", "1005"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "6~20", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"kw"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test14ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "22", "32", "42", "52", "62", "72", "82", "102", "1002"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"3", "23", "33", "43", "53", "63", "73", "83", "103", "1003"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "4~18", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"en"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test15ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "3"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"4"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"mr"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test16ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "11"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "12"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"3", "13"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "4~10", "14~21", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"gd"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test17ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "3"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"4"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "5~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"ca"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test18ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "22", "32", "42", "52", "62", "72", "82", "102", "1002"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"7", "8", "27", "28", "37", "38", "47", "48", "57", "58", "67", "68", "77", "78", "87", "88", "107", "1007"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "3~6", "9~19", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"mk"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test19ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "2", "5", "7", "8", "11", "12", "15", "17", "18", "20~22", "25", "101", "1001"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"3", "4", "13", "14", "23", "24", "33", "34", "43", "44", "53", "54", "63", "64", "73", "74", "100", "1003"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"0", "6", "16", "26", "36", "40", "46", "56", "106", "1006"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"9", "10", "19", "29", "30", "39", "49", "59", "69", "79", "109", "1000", "10000", "100000", "1000000"})

	locales := []string{"az"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test20ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "3"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"4"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"6"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "5", "7~20", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"gu", "hi"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test21ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "5", "7~10"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "3"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"4"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"6"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "11~25", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"as", "bn"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test22ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1", "5", "7~9"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2", "3"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"4"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"6"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"0", "10~24", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"or"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}

func Test23ordinal(t *testing.T) {
	var tests []pluralFormTest

	tests = appendIntegerTests(tests, "ordinal", Zero, []string{"0", "7~9"})

	tests = appendIntegerTests(tests, "ordinal", One, []string{"1"})

	tests = appendIntegerTests(tests, "ordinal", Two, []string{"2"})

	tests = appendIntegerTests(tests, "ordinal", Few, []string{"3", "4"})

	tests = appendIntegerTests(tests, "ordinal", Many, []string{"5", "6"})

	tests = appendIntegerTests(tests, "ordinal", Other, []string{"10~25", "100", "1000", "10000", "100000", "1000000"})

	locales := []string{"cy"}
	for _, locale := range locales {
		runTests(t, locale, "ordinal", tests)
	}
}
